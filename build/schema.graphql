type Platform @entity {
  id: ID!
  address: Bytes! 
  totalSale: BigInt
  totalSaleInWei: BigInt
  platformFirstSalePercentage: BigInt
  platformSecondSalePercentage: BigInt
  artistSecondSalePercentage: BigInt
  lastModifiedTimestamp: BigInt
}

# TYPE @Master
# Master image with id of `tokenId`
# Contains layers (ControlTokens) of type `Layer` (see below)
type Master @entity {
  id: ID! # unique `tokenId`
  uri: String!
  layerCount: Int!
  layers: [Layer!]! @derivedFrom(field: "master")
  creators: [Bytes!]!
  owner: Bytes!
  pastOwners: [Bytes!]! # inclusive of current owner
  highBid: BidLog @derivedFrom(field: "master")
  pastBids: [BidLog!] @derivedFrom(field: "master")
  lastUpdated: BigInt # unix timestamp
  pastUpdates: [BigInt!] # unix timestamp
  lastTransfer: TransferLog @derivedFrom(field: "master")
  pastTransfers: [TransferLog!] @derivedFrom(field: "master")
  buyNowPriceInWei: BigInt
}

# TYPE @Layer
# Represents the `ControlToken`
# Lives on a unique `Master`
# Contains lever(s) of type `Lever`
type Layer @entity {
  id: ID! # unique `tokenId`
  uri: String
  numLevers: Int
  levers: [Lever]! @derivedFrom(field: "layer")
  owner: Bytes!
  creators: [Bytes!]!
  pastOwners: [Bytes!]! # inclusive of current owner
  highBid: BidLog @derivedFrom(field: "layer")
  pastBids: [BidLog!] @derivedFrom(field: "layer")
  lastUpdate: BigInt # unix timestamp
  pastUpdates: [BigInt!]
  lastTransfer: TransferLog @derivedFrom(field: "layer")
  pastTransfers: [TransferLog!] @derivedFrom(field: "layer")
  buyNowPriceInWei: BigInt
  master: Master 
}

# TYPE @Lever
# Represents the state of a `ControlToken`
# Lives on a unique `Layer`
# Contains a list of values which map to `Layer` states
type Lever @entity {
  id: ID! # unique `tokenId` + lever index ? TODO
  minValue: Int!
  maxValue: Int!
  currentValue: Int!
  layer: Layer
}

type Account @entity {
  id: ID!
  address: Bytes!
  isCreator: Boolean
  lastModifiedTimestamp: BigInt!
  bids: [BidLog!]! # @derivedFrom(field: "bidder")
  createdMasters: [Master]!
  createdLayers: [Layer]!
  ownedMasters: [Master]!
  ownedLayer: [Layer]!
}

type SaleLog @entity {
  id: ID!
  timestamp: BigInt!
  tokenId: BigInt!
  isMaster: Boolean!
  isLayer: Boolean!
  amountInWei: BigInt!
  buyer: Account!
  seller: Account!
}

type BidLog @entity {
  id: ID!
  timestamp: BigInt!
  master: Master
  layer: Layer
  amountInWei: BigInt!
  bidder: Bytes!
  isWithdrawn: Boolean! # whether or not the bid has been withdrawn
  withdrawnTimestamp: BigInt 
}

type TransferLog @entity {
  id: ID!
  timestamp: BigInt!
  tokenId: String!
  from: Bytes!
  to: Bytes!
  master: Master
  layer: Layer
}
